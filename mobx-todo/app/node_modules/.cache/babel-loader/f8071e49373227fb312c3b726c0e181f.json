{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\n\nclass Store {\n  constructor() {\n    this.tasks = [{\n      id: 1,\n      title: \"Задача 1\",\n      done: true\n    }, {\n      id: 2,\n      title: \"Задача 2\",\n      done: false\n    }];\n    this.finallTasksArr = this.tasks;\n    makeAutoObservable(this);\n  }\n\n  findDoneItem() {\n    return this.finallTasksArr = this.tasks.filter(elem => elem.done);\n  }\n\n  InProgressItem() {\n    return this.finallTasksArr = this.tasks.filter(elem => !elem.done);\n  }\n\n  AllArr() {\n    return this.finallTasksArr = this.tasks;\n  }\n\n  deleteItem(id) {\n    this.tasks = this.tasks.filter(elem => elem.id != id);\n    this.finallTasksArr = this.tasks;\n  }\n\n  addItem(item) {\n    this.tasks.push(item);\n    this.finallTasksArr = this.tasks;\n  }\n\n  changeItem(event) {\n    let id = event.target.getAttribute(\"data-id\");\n    this.tasks.forEach(elem => {\n      if (elem.id != id) return false;\n      elem.title = event.target.value;\n    });\n    this.finallTasksArr = this.tasks;\n  }\n\n  changeStateItem(id) {\n    this.tasks.forEach(elem => {\n      if (elem.id != id) return false;\n      elem.done = !elem.done;\n    });\n    this.finallTasksArr = this.tasks;\n  }\n\n}\n\nexport default new Store();","map":{"version":3,"sources":["/Users/artemfurta/Documents/GitHub/afurta.github.io/mobx-todo/app/src/store/index.tsx"],"names":["makeAutoObservable","Store","constructor","tasks","id","title","done","finallTasksArr","findDoneItem","filter","elem","InProgressItem","AllArr","deleteItem","addItem","item","push","changeItem","event","target","getAttribute","forEach","value","changeStateItem"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;;AAGA,MAAMC,KAAN,CAAY;AAOVC,EAAAA,WAAW,GAAG;AAAA,SANdC,KAMc,GANC,CACb;AAAEC,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,KAAK,EAAE,UAAhB;AAA4BC,MAAAA,IAAI,EAAE;AAAlC,KADa,EAEb;AAAEF,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,KAAK,EAAE,UAAhB;AAA4BC,MAAAA,IAAI,EAAE;AAAlC,KAFa,CAMD;AAAA,SAFdC,cAEc,GAFU,KAAKJ,KAEf;AACZH,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAEDQ,EAAAA,YAAY,GAAG;AACb,WAAQ,KAAKD,cAAL,GAAsB,KAAKJ,KAAL,CAAWM,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACJ,IAA/B,CAA9B;AACD;;AACDK,EAAAA,cAAc,GAAG;AACf,WAAQ,KAAKJ,cAAL,GAAsB,KAAKJ,KAAL,CAAWM,MAAX,CAAkBC,IAAI,IAAI,CAACA,IAAI,CAACJ,IAAhC,CAA9B;AACD;;AACDM,EAAAA,MAAM,GAAG;AACP,WAAQ,KAAKL,cAAL,GAAsB,KAAKJ,KAAnC;AACD;;AACDU,EAAAA,UAAU,CAACT,EAAD,EAAa;AACrB,SAAKD,KAAL,GAAa,KAAKA,KAAL,CAAWM,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACN,EAAL,IAAWA,EAArC,CAAb;AACA,SAAKG,cAAL,GAAsB,KAAKJ,KAA3B;AACD;;AACDW,EAAAA,OAAO,CAACC,IAAD,EAAY;AACjB,SAAKZ,KAAL,CAAWa,IAAX,CAAgBD,IAAhB;AACA,SAAKR,cAAL,GAAsB,KAAKJ,KAA3B;AACD;;AACDc,EAAAA,UAAU,CAACC,KAAD,EAA6C;AACrD,QAAId,EAAE,GAAGc,KAAK,CAACC,MAAN,CAAaC,YAAb,CAA0B,SAA1B,CAAT;AACA,SAAKjB,KAAL,CAAWkB,OAAX,CAAmBX,IAAI,IAAI;AACzB,UAAIA,IAAI,CAACN,EAAL,IAAWA,EAAf,EAAmB,OAAO,KAAP;AACnBM,MAAAA,IAAI,CAACL,KAAL,GAAaa,KAAK,CAACC,MAAN,CAAaG,KAA1B;AACD,KAHD;AAIA,SAAKf,cAAL,GAAsB,KAAKJ,KAA3B;AACD;;AACDoB,EAAAA,eAAe,CAACnB,EAAD,EAAa;AAC1B,SAAKD,KAAL,CAAWkB,OAAX,CAAmBX,IAAI,IAAI;AACzB,UAAIA,IAAI,CAACN,EAAL,IAAWA,EAAf,EAAmB,OAAO,KAAP;AACnBM,MAAAA,IAAI,CAACJ,IAAL,GAAY,CAACI,IAAI,CAACJ,IAAlB;AACD,KAHD;AAIA,SAAKC,cAAL,GAAsB,KAAKJ,KAA3B;AACD;;AA1CS;;AA4CZ,eAAe,IAAIF,KAAJ,EAAf","sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport React from \"react\";\n\nclass Store {\n  tasks: any[] = [\n    { id: 1, title: \"Задача 1\", done: true },\n    { id: 2, title: \"Задача 2\", done: false },\n  ];\n  finallTasksArr: any[] = this.tasks;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  findDoneItem() {\n    return (this.finallTasksArr = this.tasks.filter(elem => elem.done));\n  }\n  InProgressItem() {\n    return (this.finallTasksArr = this.tasks.filter(elem => !elem.done));\n  }\n  AllArr() {\n    return (this.finallTasksArr = this.tasks);\n  }\n  deleteItem(id: number) {\n    this.tasks = this.tasks.filter(elem => elem.id != id);\n    this.finallTasksArr = this.tasks;\n  }\n  addItem(item: any) {\n    this.tasks.push(item);\n    this.finallTasksArr = this.tasks;\n  }\n  changeItem(event: React.ChangeEvent<HTMLInputElement>) {\n    let id = event.target.getAttribute(\"data-id\");\n    this.tasks.forEach(elem => {\n      if (elem.id != id) return false;\n      elem.title = event.target.value;\n    });\n    this.finallTasksArr = this.tasks;\n  }\n  changeStateItem(id: number) {\n    this.tasks.forEach(elem => {\n      if (elem.id != id) return false;\n      elem.done = !elem.done;\n    });\n    this.finallTasksArr = this.tasks;\n  }\n}\nexport default new Store();\n"]},"metadata":{},"sourceType":"module"}